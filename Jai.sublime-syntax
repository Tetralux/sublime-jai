%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Jai
file_extensions:
  - jai
  - Jai
first_line_match: "-[*]-( Mode:)? Jai -[*]-"
scope: source.jai
variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  type_chars: '[[:alnum:]\s,._^<>\[\]-]'

contexts:
  main:
    - include: global

  global:
    - include: comments
    - include: keywords
    - include: types
    # - include: custom_styling
    - include: functions
    - include: declarations
    - include: strings
    - include: string-escaped-char


  custom_styling:
    - match: \b([A-Z_](?![a-z])[A-Z_0-9]+)\b
      captures:
        1: storage.constant.jai

    - match: \b([A-Z][a-z0-9]+)([_A-Z][a-z0-9]*)*\b
      scope: storage.type.jai

  block-comment:
    - match: /\*
      scope: punctuation.definition.comment.jai
      push:
        - meta_scope: comment.block.jai
        - match: \*/
          scope: punctuation.definition.comment.jai
          pop: true
        - include: block-comment

  comments:
    - include: block-comment
    - match: //
      scope: punctuation.definition.comment.jai
      push:
        - meta_scope: comment.line.double-slash.jai
        - match: \n
          pop: true

  keywords:
    - match: \b(if|then|else|while|for|defer|return|remove|it|it_index)\b
      scope: keyword.control.jai
    - match: \b(break|continue)\b
      scope: keyword.control.jai
    - match: \b(using)\b
      scope: keyword.control.jai
    - match: \b(push_context)\b
      scope: keyword.control.jai
    - match: \b(null|true|false)\b
      scope: constant.language.jai
    - match: (\.\d+)|(\d+\.)
      scope: constant.numeric.jai
    - match: '\b(\d(\d|_)*(.(\d|_))?)((e|E)(\+|-)?\d+)?\b'
      scope: constant.numeric.jai
    - match: '\b((0b(0|1|_)+)|(0o(\d|_)+)|(0d(\d|_)+)|(0[xXhH](\h|_)+))\b'
      scope: constant.numeric.jai
    - match: \b(struct)\b
      scope: keyword.struct.jai
    - match: \b(enum)\b
      scope: keyword.enum.jai
    - match: \b(cast|acast|xx)\b
      scope: keyword.cast.jai
    - match: '\b(operator)\b'
      scope: keyword.operator_keyword.jai
    - match: \b((size_of|type_of)(_val)?|type_of|type_info)\b\s*\(
      captures:
        1: keyword.function.jai
    # - match: '(#\s*{{identifier}})'
    - match: '(#(import|load|no_abc|assert|must|complete|run|through|char|file|line|caller_location|location|foreign|foreign_library|modify|body_text))'
      scope: keyword.directive.jai
    - match: '(#{{identifier}})'
      scope: invalid.jai
    - match: '(\$\$)'
      scope: keyword.directive.jai
    - match: '(\$\s*{{identifier}})'
      scope: keyword.template.jai
    - match: '(@\s*{{identifier}})'
      scope: keyword.note.jai
    - match: \b(context)\b
      scope: keyword.operator.context.jai
    - match: '->'
      scope: keyword.operator.arrow.jai
    - match: (=>)
      scope: keyword.operator.lambda.jai
    - match: '(\+|-|\*|/|=|\!|%|\^|&|\||&&|\|\|)=?'
      scope: keyword.operator.builtin.jai
    - match: '(<<|>>)=?'
      scope: keyword.operator.shift.jai
    - match: (:)
      scope: keyword.operator.declaration.jai
    - match: (:[:=])
      scope: keyword.operator.assignment.jai
    - match: \b(\.\.)\b
      scope: keyword.range.jai

  functions:
    - match: ({{identifier}})\s*(:\s*:)\s*{{identifier}}\s*.*(=>)
      captures:
        1: meta.function.jai entity.name.function.jai
        2: keyword.operator.assigment.jai
        3: keyword.operator.lambda.jai
    - match: ({{identifier}})\s*(:\s*:)\s*(inline|no_inline)?\s*\(
      captures:
        1: meta.function.jai entity.name.function.jai
        2: keyword.operator.assigment.jai
        3: keyword.jai
    - match: ({{identifier}})\s*\(
      captures:
        1: meta.function.jai entity.name.function.jai

  declarations:
    - match: ({{identifier}})\s*(:\s*:)\s*(struct|enum(\s*{{identifier}}))\s*\{
      captures:
        1: meta.type.jai entity.name.type.jai
        2: keyword.operator.jai
        3: keyword.control.jai
      push:
        - match: ''
          pop: true
        - include: types

  types:
    - match: (\[)(\d*)(\])(?=[[:alpha:]_])
      scope: meta.brackets.jai
      captures:
        1: punctuation.definition.brackets.begin.jai
        2: constant.numeric.jai
        3: punctuation.definition.brackets.end.jai
    - include: basic-types

  basic-types:
    - match: '\b((s8|s16|s32|s64|int)?|(u8|u16|u32|u64|uint)?|(float|float32|float64)?|bool|string|Any|void)\b'
      scope: storage.type.jai

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.jai
      push:
        - meta_scope: string.quoted.double.jai
        - match: '"'
          scope: punctuation.definition.string.end.jai
          pop: true
        - include: string-escaped-char
        - include: string-format
    - match: "'({{identifier}})'?"
      scope: keyword.infix.jai

  string-escaped-char:
    - match: '\\(\\|[abfnrutv''"]|x\h{2}|u\h{4}|U\h{8}|[0-7]{3})'
      scope: constant.character.escape.jai
    - match: \\.
      scope: invalid.illegal.unknown-escape.jai

  string-format:
    - match: '%\d*'
      scope: string.format.jai
      # scope: keyword.other.jai